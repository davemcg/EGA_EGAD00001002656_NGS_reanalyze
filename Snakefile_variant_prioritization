#grab SAMPLE name from vcf input:wq
SAMPLE = str(config['input_vcf']).split('.vcf')[0]
# logic to parse ped for families
# can either be  multiple families (a list) in the yaml as below
# need to grab the family names from it
if type(config['ped']) == list:
	PEDfile = [x.split('.ped')[0].split('/')[-1] for x in config['ped']]
	PEDbase = '/'.join(config['ped'][0].split('.ped')[0].split('/')[:-1]) + '/'
# otherwise just one family can be provided, which would be a str as below:
else:
	PEDfile = config['ped'].split('.ped')[0].split('/')[-1]
	PEDbase = '/'.join(config['ped'].split('.ped')[0].split('/')[:-1]) + '/'

if type(config['family_name']) == str:
	family_name_con = config['family_name']
else:
	family_name_con = '|'.join(config['family_name'])

# import regions
REGIONS_file = config['regions']
REGIONS = open(REGIONS_file).readlines()
REGIONS = [r.strip() for r in REGIONS]
MT_CONTIGS="MT,GL000207.1,GL000226.1,GL000229.1,GL000231.1,GL000210.1,GL000239.1,GL000235.1,GL000201.1,GL000247.1,GL000245.1,GL000197.1,GL000203.1,GL000246.1,GL000249.1,GL000196.1,GL000248.1,GL000244.1,GL000238.1,GL000202.1,GL000234.1,GL000232.1,GL000206.1,GL000240.1,GL000236.1,GL000241.1,GL000243.1,GL000242.1,GL000230.1,GL000237.1,GL000233.1,GL000204.1,GL000198.1,GL000208.1,GL000191.1,GL000227.1,GL000228.1,GL000214.1,GL000221.1,GL000209.1,GL000218.1,GL000220.1,GL000213.1,GL000211.1,GL000199.1,GL000217.1,GL000216.1,GL000215.1,GL000205.1,GL000219.1,GL000224.1,GL000223.1,GL000195.1,GL000212.1,GL000222.1,GL000200.1,GL000193.1,GL000194.1,GL000225.1,GL000192.1,NC_007605"

# set global Snakemake wildcard constraints
wildcard_constraints:
	sample=SAMPLE,
	region = '.*\d|MT_contigs',
#	region = '^[0-9a-zA-Z]+:\d+-\d+'
	family_name=family_name_con

localrules: all, query_gemini_simple

rule all:
	input:
		#expand('temp/{sample}.SORTED.VT.VEP.VCFANNO.vcf.gz', sample=SAMPLE)
		#expand('{sample}.PED_{ped}.gemini.db', sample=SAMPLE, ped=PED),
		expand('gemini_out/{sample}.{family_name}.PED_{ped}.het.tsv', sample=SAMPLE, ped=PEDfile, family_name=config['family_name']),
		#expand('reports/{sample}.{family_name}.PED_{ped}.excel.report.xlsx', sample=SAMPLE, ped=PEDfile, family_name=config['family_name'])

rule n_split_vcf:
	input:
		vcf = config['input_vcf']
	output:
		vcf = temp('temp/{sample}__{region}.vcf.gz'),
		index = temp('temp/{sample}__{region}.vcf.gz.tbi')
	shell:
		"""
		export REF_CACHE=/scratch/$SLURM_JOB_ID/
		module load {config[samtools_version]}
		if [[ {wildcards.region} != "MT_contigs" ]]; then
			bcftools view -r {wildcards.region} {input.vcf} | bgzip > {output.vcf}
		else
			bcftools view -r {MT_CONTIGS} {input.vcf} | bgzip > {output.vcf}
		fi
		tabix -p vcf {output.vcf}
		"""

rule vt_bgzip_and_tabix_vcf:
	input:
		'temp/{sample}__{region}.vcf.gz'
	output:
		vcf = temp('temp/vt.{sample}__{region}.vcf.gz'),
		index = temp('temp/vt.{sample}__{region}.vcf.gz.tbi')
	shell:
		"""
		export REF_CACHE=/scratch/$SLURM_JOB_ID/
		module load {config[samtools_version]}
		cat {input} \
			| sed 's/ID=AD,Number=./ID=AD,Number=R/' \
			| ~/git/vt/./vt decompose -s - \
			| ~/git/vt/./vt normalize -r {config[ref_genome]} - \
			| bgzip -c > {output.vcf}
		tabix -f -p vcf {output.vcf}
		"""

# annotate with VEP
rule VEP_annotate:
	input:
		'temp/vt.{sample}__{region}.vcf.gz'
	output:
		vcf = temp('temp/{sample}__{region}.SORTED.VT.VEP.vcf.gz'),
		index = temp('temp/{sample}__{region}.SORTED.VT.VEP.vcf.gz.tbi')
	threads: 2
	shell:
		"""
		module load {config[VEP_version]}
		vep -i {input} --offline \
			--cache --dir_cache $VEPCACHEDIR \
			--fasta $VEPCACHEDIR/GRCh37.fa --species human --assembly GRCh37  \
			--format vcf \
			--output_file {output.vcf} \
			--plugin Grantham \
			--plugin MaxEntScan,/data/OGVFB/resources/MaxEntScan \
			--plugin CADD,/fdb/CADD/1.3/prescored/whole_genome_SNVs.tsv.gz,/fdb/CADD/1.3/prescored/InDels.tsv.gz \
			--canonical \
			--ccds \
			--total_length \
			--hgvs \
			--sift b \
			--polyphen b \
			--symbol \
			--numbers \
			--biotype \
			--total_length \
			--pubmed \
			--domains \
			--gene_phenotype \
			--custom /fdb/gnomad/vep/gnomad.genomes.r2.0.1.sites.noVEP.vcf.gz,gnomADg,vcf,exact,0,AF_AFR,AF_AMR,AF_ASJ,AF_EAS,AF_FIN,AF_NFE,AF_OTH \
			--fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE,CANONICAL,DOMAINS,CLIN_SIG,Grantham,MaxEntScan,HGVSc,HGVSp,PUBMED,Phenotypes,CADD_RAW,CADD_PHRED \
			--vcf --compress_output bgzip --force_overwrite --fork {threads}
		# tabix
		tabix -f -p vcf {output.vcf}
		"""

# annotate with vcfanno
rule vcfanno_annotate:
	input:
		vcf = 'temp/{sample}__{region}.SORTED.VT.VEP.vcf.gz',
		index = 'temp/{sample}__{region}.SORTED.VT.VEP.vcf.gz'
	output:
		vcf = 'temp/{sample}__{region}.SORTED.VT.VEP.VCFANNO.vcf.gz',
		index = 'temp/{sample}__{region}.SORTED.VT.VEP.VCFANNO.vcf.gz.tbi'
	threads: 16
	shell:
		"""
		module load {config[vcfanno_version]}
		vcfanno -p {threads} -lua {config[vcfanno_lua]} {config[vcfanno_conf]} {input.vcf} | bgzip > {output.vcf} 
		tabix -f -p vcf {output.vcf}
		"""

# merge vcfs into one again
rule merge_vcf:
	input:
		vcf = expand('temp/{{sample}}__{region}.SORTED.VT.VEP.VCFANNO.vcf.gz', region=REGIONS),
	output:
		vcf = protected('temp/{sample}.SORTED.VT.VEP.VCFANNO.vcf.gz')
	threads: 16
	shell:
		"""
		export REF_CACHE=/scratch/$SLURM_JOB_ID/
		module load {config[samtools_version]}
		bcftools concat -O z -o {output.vcf} --threads {threads} {input.vcf} #| bcftools sort -T /scratch/$SLURM_JOB_ID/ -m 48G -O z -o {output.vcf}
		"""

# ensure that the concat didn't mess up the order
rule sort_tabix:
	input:
		vcf = 'temp/{sample}.SORTED.VT.VEP.VCFANNO.vcf.gz'
	output:
		vcf = protected('{sample}.RESORTED.VT.VEP.VCFANNO.vcf.gz'),
		index = '{sample}.RESORTED.VT.VEP.VCFANNO.vcf.gz.tbi'
	shell:
		"""
		export REF_CACHE=/scratch/$SLURM_JOB_ID/
		/home/mcgaugheyd/bin/gsort_linux_amd64 --memory 60000 {input.vcf} /data/mcgaugheyd/genomes/1000G_phase2_GRCh37/GRCh37_gatk_order.genome | bgzip -c > {output.vcf}
        tabix -f -p vcf {output.vcf}
		"""

# create sample free vcf
rule sample_free_vcf:
	input:
		vcf = 'temp/{sample}.RESORTED.VT.VEP.VCFANNO.vcf.gz',
		index = 'temp/{sample}.RESORTED.VT.VEP.VCFANNO.vcf.gz.tbi'
	output:
		vcf = 'temp/{sample}.annotated.noSamples.vcf.gz',
		index = 'temp/{sample}.annotated.noSamples.vcf.gz.tbi'
	shell:
		"""
		export REF_CACHE=/scratch/$SLURM_JOB_ID/
		module load {config[samtools_version]}
		bcftools view -G {input.vcf} -f PASS -O z -o {output.vcf}
		tabix -f -p vcf {output.vcf}
		"""

# create gemini database
rule make_gemini_db:
	input:
		vcf = '{sample}.RESORTED.VT.VEP.VCFANNO.vcf.gz',
#		index = 'temp/{sample}.SORTED.VT.VEP.VCFANNO.vcf.gz.tbi'
	output:
		'{sample}.PED_{ped}.gemini.db'
	shell:
		"""
		module load {config[vcf2db_version]}
		echo {wildcards.ped}.ped
		vcf2db.py {input.vcf} {PEDbase}{wildcards.ped}.ped {output}
		"""

# do het and hom queries with gemini with standard filters
rule query_gemini_simple:
	input:
		db = '{sample}.PED_{ped}.gemini.db'
	output:
		gemini_het = 'gemini_out/{sample}.{family_name}.PED_{ped}.het.tsv',
		gemini_hom = 'gemini_out/{sample}.{family_name}.PED_{ped}.hom.tsv'
	shell:
		"""
		module load {config[gemini_version]}
		gemini query --show-samples --header -q "select * from variants where aaf < 0.05 and filter is NULL AND aaf_esp_all < 0.0001 AND aaf_1kg_all_float < 0.0001 AND af_exac_all < 0.0001  and (is_coding=1 OR is_splicing=1)" --gt-filter "(gt_types.{wildcards.family_name} == HET)" {input.db}  > {output.gemini_het} 
		gemini query --show-samples --header -q "select * from variants where aaf < 0.05 and filter is NULL AND aaf_esp_all < 0.01 AND aaf_1kg_all_float < 0.01 AND af_exac_all < 0.01  and (is_coding=1 OR is_splicing=1)" --gt-filter "(gt_types.{wildcards.family_name} == HOM_ALT)" {input.db}  > {output.gemini_hom} 
		"""	
		
# now write report for each family given in the yaml family_name section
rule query_gemini:
	input:
		db = '{sample}.PED_{ped}.gemini.db'
	params:
		aaf = config['aaf_change']
	output:
		report_name = 'reports/{sample}.{family_name}.PED_{ped}.excel.report.xlsx'
	shell:
		"""
		module load {config[gemini_version]}
		/home/mcgaugheyd/git/variant_prioritization/src/query_gemini.py -d {input} -f {wildcards.family_name} -o {output} -l {config[gemini_lenient]} --af_change {params.aaf}
		"""
